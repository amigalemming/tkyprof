$(function() {
  var data  = #{json};
  var mode  = profilingMode({type: "#{profilingType}"});
  var link  = parmalink();
  var chart = costCentreChart({
    type:     "#{profilingType}",
    data:     data,
    selector: "#chart"
  });

  mode.timeButton.click(function(event) {
    mode.change("time");
    link.mode(mode.type);
    chart.mode(mode.type);
  });

  mode.allocButton.click(function(event) {
    mode.change("alloc");
    link.mode(mode.type);
    chart.mode(mode.type);
  });

  $(window).bind('popstate', function(event) {
    if (!window.history.ready && !event.originalEvent.state)
      return; // workaround for popstate on load

    mode.change_by_pathname(location.pathname);
    chart.mode(mode.type);
  });
});

function parmalink(spec) {
  var that = {};
  var regex = /^(\/reports\/[0-9]+)\/(time|alloc)(.*)$/;
  var matched = regex.exec(location.pathname);
  var prefix = matched[1],
      type   = matched[2],
      suffix = matched[3];

  that.mode = mode;

  function mode(t) {
    window.history.ready = true;
    history.pushState(null, null, prefix + '/' + t + suffix);
  }

  // function position(p) {
    // window.history.ready = true;
    // history.pushState({ mode: null, position: null}, null, prefix);
  // }

  return that;
}

function profilingMode(spec) {
  var that = {};
  var type = spec.type || "time";
  var timeButton = $("#time"),
      allocButton = $("#alloc");

  type === "time" ? time() : alloc();

  that.timeButton  = timeButton;
  that.allocButton = allocButton;
  that.type        = type;
  that.change      = change;
  that.change_by_pathname = function(pathname) {
    var regex = /^(?:\/reports\/[0-9]+)\/(time|alloc)(?:.*)$/;
    var matched = regex.exec(location.pathname);
    var type = matched[1];
    change(type);
  };

  function change(t) {
    if (t === "time") {
      time();
    } else {
      alloc();
    }
  };

  function time() {
    that.type = "time";
    timeButton.addClass("active");
    allocButton.removeClass("active");
  };

  function alloc() {
    that.type = "alloc";
    timeButton.removeClass("active");
    allocButton.addClass("active");
  };

  return that;
}

// All d3.js related operations are inside
function costCentreChart(spec) {
  // private properties
  var that = {}; // a new object

  var selector = spec.selector,
      w = spec.w || $(selector).width(),
      h = spec.h || $(selector).height(),
      r = Math.min(w, h) / 2,
      x = d3.scale.linear().range([0, 2*Math.PI]),
      y = d3.scale.sqrt().range([0, r]),
      color = spec.color || d3.scale.category20c(),
      type = spec.type || "time";

  var vis = d3.select(selector)
    .append("svg:svg")
    .attr("width", w)
    .attr("height", h)
    .append("svg:g")
    .attr("transform", "translate(" + w/2 + "," + h/2 + ")");

  var partition = d3.layout.partition()
    .children(function(d) { return d.subForest; })
    .value(fnValue(type));

  var arc = d3.svg.arc()
    .startAngle(function(d) { return Math.max(0, Math.min(2*Math.PI, x(d.x))); })
    .endAngle(function(d) { return Math.max(0, Math.min(2*Math.PI, x(d.x + d.dx))); })
    .innerRadius(function(d) { return Math.max(0, y(d.y)); })
    .outerRadius(function(d) { return Math.max(0, y(d.y + d.dy)); });

  var path = vis.data([spec.data]).selectAll("path")
    .data(partition.nodes)
    .enter().append("svg:path")
    .attr("d", arc)
    .style("fill", function(d) { return color((d.children ? d : d.parent).name); })
    .on("click", click)
    .on("mouseover", mouseover)
    .each(function(d) { d.x0 = d.x; d.dx0 = d.dx; }); // stash the old values for transition

  var context = costCentreContext(spec.data);

  // event handlers
  function click(d) {
    context.update(d);
    path.transition()
      .duration(500)
      .attrTween("d", zoomTween(d));
  }

  function mouseover() {
    // console.log("mouseover");
  }

  function arcTween(a) {
    var i = d3.interpolate({x: a.x0, dx: a.dx0}, a);
    return function(t) {
      var b = i(t);
      a.x0  = b.x;
      a.dx0 = b.dx;
      return arc(b);
    };
  }

  function zoomTween(d) {
    var xd = d3.interpolate(x.domain(), [d.x, d.x + d.dx]),
        yd = d3.interpolate(y.domain(), [d.y, 1]),
        yr = d3.interpolate(y.range(), [d.y ? 20 : 0, r]);
    return function(d, i) {
      return i
        ? function(t) { return arc(d); }
        : function(t) { x.domain(xd(t)); y.domain(yd(t)).range(yr(t)); return arc(d); };
    };
  }

  // helpers
  function fnValue(type) {
    if (type === "alloc") {
      return function(d) { return d.individualAlloc; };
    } else {
      return function(d) { return d.individualTime; };
    }
  }

  // instance (public) properties
  that.mode = function(type) {
    path.data(partition.value(fnValue(type)))
      .transition()
      .duration(500)
      .attrTween("d", arcTween);
  };

  that.currentNode = function() {
    return currentNode;
  };

  that.children = function() {
    return currentNode.children;
  };

  return that;
}

function costCentreContext(spec) {
  var that = {};
  var currentNode = spec.currentNode,
      children = spec.children;

  update(spec);

  that.update = update;

  function update(d) {
    showCostCentre(d);
    showChildren(d);
  };

  function showCostCentre(node) {
    var currentNode = $("#current-node dl");
    $("#current-node-module", currentNode).text(node.module);
    $("#current-node-name", currentNode).text(node.name);
    $("#current-node-number", currentNode).text(node.no);
    $("#current-node-entries", currentNode).text(node.entries);
    $("#current-node-ind-time", currentNode).text(node.individualTime);
    $("#current-node-ind-alloc", currentNode).text(node.individualAlloc);
    $("#current-node-inh-time", currentNode).text(node.inheritedTime);
    $("#current-node-inh-alloc", currentNode).text(node.inheritedAlloc);
  }

  function showChildren(node) {
    $("#children ol li").remove();
    var children = $("#children ol");
    var cs = node.children;
    var n = cs.length < 10 ? cs.length : 10;
    for (var i = 0; i < n; i++) {
      children.append("<li>" + cs[i].name + "</li>");
    }
  }

  return that;
}
